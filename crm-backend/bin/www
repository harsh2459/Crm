#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')
var http = require('http');
const socketIo = require('socket.io');
/**
 * Get port from environment and store in Express.
 */
const HOST = '192.168.1.100'; // or your machine IP
const PORT = process.env.PORT || '5000';

var port = normalizePort(`${PORT}`);
app.set('port', port);

const mongoose = require('mongoose');

mongoose.connect("mongodb://192.168.1.100/crm")
  .then(() => console.log('Connected!'));


/*
    Create HTTP server.
*/

var server = http.createServer(app);


// Attach Socket.io to server
const io = socketIo(server, { cors: { origin: '*' } });
app.set('io', io);

const onlineUsers = new Map();

io.on('connection', (socket) => {
    console.log('User connected:', socket.id);

    socket.on('userOnline', (empId) => {
        onlineUsers.set(empId, socket.id);
        io.emit('onlineUsers', Array.from(onlineUsers.keys()));
    });

    socket.on('typing', (data) => {
        socket.to(data.chatRoomId).emit('typing', data.empId);
    });

    socket.on('stopTyping', (data) => {
        socket.to(data.chatRoomId).emit('stopTyping', data.empId);
    });

    socket.on('disconnect', () => {
        for (let [empId, id] of onlineUsers.entries()) {
            if (id === socket.id) {
                onlineUsers.delete(empId);
                break;
            }
        }
        io.emit('onlineUsers', Array.from(onlineUsers.keys()));
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, HOST, () => {
  console.log(`Server running at http://${HOST}/`);
});
server.on('error', onError);
server.on('listening', onListening);

/**
  Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/*
 * Event listener for HTTP server "error" event.
*/

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
